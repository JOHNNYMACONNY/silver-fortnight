{
  "name": "tradeya",
  "type": "module",
  "main": "./src/main.tsx",
  "module": "./src/main.tsx",
  "exports": {
    ".": {
      "import": "./src/main.tsx",
      "require": "./src/main.tsx"
    }
  },
  "scripts": {
    "test:e2e:run": "./scripts/run-e2e.sh",
    "test:e2e:firefox": "./scripts/run-e2e.sh --project=firefox",
    "test:e2e:webkit": "./scripts/run-e2e.sh --project=webkit",
    "seed:challenges": "npx tsx scripts/seed-challenges.ts",
    "playwright:install": "npx playwright install --with-deps",
    "dev": "vite",
    "build": "npm run assets:optimize && npm run assets:cleanup && tsc && vite build",
    "assets:optimize": "node scripts/optimize-assets.cjs",
    "assets:cleanup": "node scripts/cleanup-assets.cjs",
    "assets:clean": "rm -rf public/icons public/images/optimized public/assets",
    "assets:manifest": "node -e \"console.log(JSON.stringify(require('./public/asset-manifest.json'), null, 2))\"",
    "preview": "vite preview",
    "type-check": "tsc -p tsconfig.app.json --noEmit",
    "lint": "eslint 'src/**/*.{ts,tsx}' --report-unused-disable-directives --max-warnings 0",
    "lint:fix": "eslint 'src/**/*.{ts,tsx}' --fix",
    "format": "prettier --write \"src/**/*.{ts,tsx}\"",
    "test": "jest --coverage",
    "test:watch": "jest --watch",
    "test:ci": "jest --ci --coverage --reporters='default' --reporters='jest-junit'",
    "test:integration": "jest --config jest.config.integration.ts",
    "test:e2e": "playwright test",
    "test:e2e:headed": "playwright test --headed",
    "test:e2e:debug": "playwright test --debug",
    "test:e2e:ui": "playwright test --ui",
    "test:e2e:report": "playwright show-report",
    "test:e2e:trade-lifecycle": "playwright test trade-lifecycle.spec.ts",
    "test:e2e:collaboration": "playwright test collaboration-workflows.spec.ts",
    "test:e2e:challenges": "playwright test challenge-completion.spec.ts",
    "test:all": "npm run test && npm run test:integration && npm run test:e2e",
    "test:migration": "jest --config jest.config.migration.ts",
    "test:migration:validation:staging": "jest --config jest.config.migration.staging.js",
    "staging:validate": "npx tsx scripts/staging-migration-validation.ts --project=tradeya-staging",
    "staging:setup": "npx tsx scripts/production/production-env-setup.ts --project=tradeya-staging --env=staging",
    "staging:migration:execute": "npm run staging:setup && npx tsx scripts/production-migration-engine.ts --project=tradeya-staging --execute",
    "staging:migration:monitor": "npx tsx scripts/enhanced-migration-monitor.ts --project=tradeya-staging --env=staging",
    "staging:migration:rollback": "npx tsx scripts/enhanced-rollback-migration.ts --project=tradeya-staging --execute",
    "staging:comprehensive": "npm run staging:setup && npm run staging:migration:execute && npm run staging:validate",
    "security:init": "./scripts/set-permissions.sh",
    "security:validate": "./scripts/validate-security.sh",
    "test:security": "npm run security:test",
    "security:test": "jest --config jest.config.security.cjs",
    "security:rules": "jest --testMatch='**/__tests__/firebase-security.test.ts' --runInBand",
    "security:deploy": "./scripts/deploy-security-rules.sh",
    "security:check": "./scripts/check-security-rules.sh",
    "security:audit": "npm audit --production && npm run security:validate",
    "security:report": "./scripts/validate-security.sh --report-only",
    "prepare": "if [ \"$CI\" != \"true\" ] && [ \"$VERCEL\" != \"1\" ] && [ \"$NETLIFY\" != \"true\" ]; then npm run security:init && (git rev-parse --git-dir > /dev/null 2>&1 && command -v husky > /dev/null 2>&1 && husky install || echo 'Skipping husky install - not in a git repo or husky missing'); else echo 'Skipping prepare script in CI/deployment environment'; fi",
    "postinstall": "echo 'Post-install completed successfully'",
  "precommit": "lint-staged && npm run security:check",
  "pre-commit": "npm run precommit",
    "firebase:emulators": "firebase emulators:start --only firestore,storage",
    "firebase:deploy:rules": "npm run security:validate && npm run security:deploy",
    "firebase:rules:lint": "firebase firestore:rules:lint firestore.rules && firebase storage:rules:lint storage.rules",
    "firebase:indexes:verify": "npx tsx scripts/verify-indexes.ts default",
    "firebase:indexes:verify:staging": "npx tsx scripts/verify-indexes.ts staging",
    "firebase:indexes:verify:production": "npx tsx scripts/verify-indexes.ts production",
    "firebase:indexes:test": "jest --config jest.config.ts src/scripts/__tests__/verify-indexes.test.ts",
    "firebase:analyze": "npx tsx scripts/analyze-firebase-dependencies.ts",
    "firebase:analyze:json": "npx tsx scripts/analyze-firebase-dependencies.ts --format json --output firebase-analysis.json",
    "firebase:analyze:markdown": "npx tsx scripts/analyze-firebase-dependencies.ts --format markdown --output firebase-analysis.md",
    "firebase:analyze:test": "jest --config jest.config.scripts.js scripts/__tests__/analyze-firebase-dependencies.test.ts",
    "migration:pre-check": "npm run test:migration && npm run firebase:indexes:verify:production",
    "migration:dry-run": "npx tsx scripts/migrate-schema.ts --project=tradeya-45ede",
    "migration:dry-run:staging": "npx tsx scripts/migrate-schema.ts --project=tradeya-staging",
    "migration:execute": "npx tsx scripts/migrate-schema.ts --project=tradeya-45ede --execute",
    "migration:execute:staging": "npx tsx scripts/migrate-schema.ts --project=tradeya-staging --execute",
    "migration:monitor": "npx tsx scripts/monitor-migration.ts --project=tradeya-45ede",
    "migration:monitor:staging": "npx tsx scripts/monitor-migration.ts --project=tradeya-staging",
    "migration:rollback:dry-run": "npx tsx scripts/rollback-migration.ts --project=tradeya-45ede",
    "migration:rollback:execute": "npx tsx scripts/rollback-migration.ts --project=tradeya-45ede --execute",
    "migration:rollback:backup": "npx tsx scripts/rollback-migration.ts --project=tradeya-45ede --backup-id=BACKUP_ID --execute",
    "migration:status": "echo 'Migration Status Check' && npm run migration:monitor",
    "migration:full-cycle": "npm run migration:pre-check && npm run migration:dry-run && echo 'Review dry run results before proceeding with: npm run migration:execute'",
    "ci:security": "npm run security:validate && npm run security:test",
    "ci:full": "npm run type-check && npm run lint && npm run test:ci && npm run ci:security",
    "analyze": "source-map-explorer 'dist/assets/*.js'",
    "scan": "npm audit && npm outdated",
    "validate": "npm run type-check && npm run lint && npm run test && npm run security:validate && npm run lint:glass && npm run lint:brand",
    "lint:glass": "tsx scripts/style-audit-glass.ts",
    "lint:brand": "tsx scripts/style-audit-brand-tokens.ts",
    "check-imports": "node scripts/check-imports.js",
    "quality-check": "npm run check-imports && npm run lint",
    "docs:dashboard": "npx tsx scripts/docs-cli.ts dashboard",
    "docs:health": "npx tsx scripts/maintain-docs.ts health",
    "docs:analyze": "npx tsx scripts/maintain-docs.ts analyze",
    "docs:validate": "npx tsx scripts/maintain-docs.ts validate",
    "docs:archive": "npx tsx scripts/maintain-docs.ts archive",
    "docs:archive:execute": "npx tsx scripts/maintain-docs.ts archive --execute",
    "docs:priority": "npx tsx scripts/maintain-docs.ts priority",
    "docs:search": "npx tsx scripts/docs-cli.ts search",
    "docs:create": "npx tsx scripts/docs-cli.ts create",
    "docs:firestore": "npx tsx scripts/docs-cli.ts firestore",
    "docs:quick": "npx tsx scripts/docs-cli.ts quick",
    "docs:test": "jest --config jest.config.ts scripts/__tests__/maintain-docs.test.ts",
    "docs:maintenance": "npx tsx scripts/maintain-docs.ts analyze && npx tsx scripts/maintain-docs.ts validate && npx tsx scripts/maintain-docs.ts priority",
    "test:migration:comprehensive": "jest --config jest.config.migration.ts --coverage --verbose --reporters=default --reporters=jest-html-reporters",
    "test:migration:production-engine": "jest --config jest.config.migration.ts --testPathPattern=productionMigrationEngine.test.ts",
    "test:migration:monitoring": "jest --config jest.config.migration.ts --testPathPattern=enhancedMonitoring.test.ts",
    "generate:component": "npx tsx scripts/generators/componentGenerator.ts",
    "generate:service": "npx tsx scripts/generators/serviceGenerator.ts",
    "generate:docs": "npx tsx -e \"import('./src/utils/development/docGenerator.js').then(m => m.generateDocsCLI())\"",
    "dev:dashboard": "echo 'Development Dashboard available at http://localhost:5173 - Toggle with floating button'",
    "dev:console": "echo 'Enhanced Dev Console available via window.__DEV_CONSOLE'",
    "dev:profiler": "echo 'Performance Profiler available via window.__PERFORMANCE_PROFILER'",
    "debt:analyze": "npx tsx scripts/technicalDebtAnalyzer.ts",
    "debt:fix": "npx tsx scripts/fixTechnicalDebt.ts",
    "deps:update": "npx tsx scripts/updateDependencies.ts",
    "deps:update:safe": "npx tsx scripts/updateDependencies.ts --safe-only",
    "audit:security": "npm audit && npx tsx scripts/updateDependencies.ts --skip-audit",
    "test:migration:rollback": "jest --config jest.config.migration.ts --testPathPattern=rollbackProcedures.test.ts",
    "test:migration:coordination": "jest --config jest.config.migration.ts --testPathPattern=migrationCoordination.test.ts",
    "test:migration:readiness": "jest --config jest.config.migration.ts --testPathPattern=productionReadiness.test.ts",
    "test:migration:integration": "jest --config jest.config.migration.ts --testPathPattern=integrationTests.test.ts",
    "test:migration:data-validation": "jest --config jest.config.migration.ts --testPathPattern=dataValidation.test.ts",
    "test:migration:performance": "jest --config jest.config.migration.ts --testPathPattern=performanceRegression.test.ts",
    "test:migration:trades-page": "jest --config jest.config.migration.ts --testPathPattern=tradesPageMigration.test.ts",
    "test:migration:dry-run": "jest --config jest.config.migration.ts --testPathPattern='(productionMigrationEngine|productionReadiness)' --verbose",
    "test:migration:pre-production": "npm run test:migration:readiness && npm run test:migration:rollback && npm run test:migration:coordination",
    "test:migration:validation-suite": "npm run test:migration:data-validation && npm run test:migration:integration && npm run test:migration:performance",
    "test:migration:ci": "jest --config jest.config.migration.ts --ci --coverage --reporters='default' --reporters='jest-junit' --coverageReporters='text' --coverageReporters='lcov' --coverageReporters='json'",
    "test:migration:watch": "jest --config jest.config.migration.ts --watch --verbose",
    "migration:validate-env": "node -e \"console.log('Environment validation:', process.env.NODE_ENV || 'development'); console.log('Migration config valid:', !!process.env.FIREBASE_PROJECT_ID);\"",
    "migration:health-check": "npm run firebase:indexes:verify && npm run test:migration:readiness",
    "migration:pre-flight": "npm run migration:validate-env && npm run migration:health-check && npm run test:migration:pre-production",
    "migration:test-report": "jest --config jest.config.migration.ts --coverage --coverageReporters='html' --coverageDirectory='coverage/migration-report'",
    "migration:performance-baseline": "npm run test:migration:performance -- --verbose --detectOpenHandles",
    "production:env-setup": "npx tsx scripts/production/production-env-setup.ts",
    "production:env-setup:staging": "npx tsx scripts/production/production-env-setup.ts --env=staging",
    "production:validate": "npx tsx scripts/production/pre-migration-validation.ts",
    "production:validate:staging": "npx tsx scripts/production/pre-migration-validation.ts --env=staging",
    "production:phased-migration": "npx tsx scripts/production/phased-migration-executor.ts",
    "production:phased-migration:staging": "npx tsx scripts/production/phased-migration-executor.ts --env=staging",
    "production:monitoring": "npx tsx scripts/production/production-monitoring.ts",
    "production:monitoring:staging": "npx tsx scripts/production/production-monitoring.ts --env=staging",
    "production:migration:full": "npx tsx scripts/production/phased-migration-executor.ts --env=production --migration-id=phase-100-$(date +%s) --version=2.0",
    "production:migration:enhanced-monitor": "npx tsx scripts/enhanced-migration-monitor.ts",
    "production:migration:enhanced-rollback": "npx tsx scripts/enhanced-rollback-migration.ts",
    "production:readiness-check": "npm run production:env-setup && npm run production:validate",
    "production:deployment-prep": "npm run production:readiness-check && npm run test:migration:pre-production",
    "production:deploy": "npm run production:deployment-prep && npm run production:phased-migration",
    "production:pre-flight-check": "npx tsx scripts/production/pre-migration-validation.ts --env=production",
    "production:monitoring:start": "npx tsx scripts/production/production-monitoring.ts --env=production",
    "production:rollback:start": "npx tsx scripts/production/production-rollback-system.ts --env=production",
    "production:rollback:emergency": "npx tsx scripts/production/production-rollback-system.ts --env=production --action=emergency",
    "production:migration:10-percent": "npx tsx scripts/production/phased-migration-executor.ts --env=production --migration-id=phase-10-$(date +%s) --version=2.0",
    "production:migration:50-percent": "npx tsx scripts/production/phased-migration-executor.ts --env=production --migration-id=phase-50-$(date +%s) --version=2.0",
    "production:deploy:complete": "npx tsx scripts/production/production-deployment-executor.ts --env=production",
    "production:deploy:dry-run": "npx tsx scripts/production/production-deployment-executor.ts --env=production --dry-run",
    "production:deploy:force": "npx tsx scripts/production/production-deployment-executor.ts --env=production --force",
    "production:post-migration-validation": "npx tsx scripts/production/pre-migration-validation.ts --env=production --post-migration",
    "staging:pre-flight-check": "npx tsx scripts/production/pre-migration-validation.ts --env=staging",
    "staging:monitoring:start": "npx tsx scripts/production/production-monitoring.ts --env=staging",
    "staging:rollback:start": "npx tsx scripts/production/production-rollback-system.ts --env=staging",
    "staging:migration:10-percent": "npx tsx scripts/production/phased-migration-executor.ts --env=staging --migration-id=phase-10-$(date +%s) --version=2.0",
    "staging:migration:50-percent": "npx tsx scripts/production/phased-migration-executor.ts --env=staging --migration-id=phase-50-$(date +%s) --version=2.0",
    "staging:migration:full": "npx tsx scripts/production/phased-migration-executor.ts --env=staging --migration-id=phase-100-$(date +%s) --version=2.0",
    "staging:deploy:complete": "npx tsx scripts/production/production-deployment-executor.ts --env=staging",
    "staging:deploy:dry-run": "npx tsx scripts/production/production-deployment-executor.ts --env=staging --dry-run",
    "staging:post-migration-validation": "npx tsx scripts/production/pre-migration-validation.ts --env=staging --post-migration",
    "deploy:migration-fixes": "npx tsx scripts/deploy-migration-fixes.ts --project=tradeya-45ede --env=production",
    "deploy:migration-fixes:enhanced": "npx tsx scripts/enhanced-deploy-migration-fixes.ts --project=tradeya-45ede --env=production",
    "deploy:migration-fixes:staging": "npx tsx scripts/deploy-migration-fixes.ts --project=tradeya-staging --env=staging",
    "deploy:indexes": "firebase deploy --only firestore:indexes --project tradeya-45ede",
    "deploy:rules": "firebase deploy --only firestore:rules --project tradeya-45ede",
    "firebase:diagnose": "npx tsx scripts/firebase-cli-diagnostics.ts --project=tradeya-45ede",
    "firebase:diagnose:staging": "npx tsx scripts/firebase-cli-diagnostics.ts --project=tradeya-staging",
    "manual:index-guide": "npx tsx scripts/manual-index-creation-guide.ts --project=tradeya-45ede",
    "manual:index-guide:staging": "npx tsx scripts/manual-index-creation-guide.ts --project=tradeya-staging",
    "storybook": "storybook dev -p 6006",
    "build-storybook": "storybook build",
    "chromatic": "^8.0.0"
  },
  "dependencies": {
    "@emotion/is-prop-valid": "^1.3.1",
    "@genkit-ai/mcp": "^1.15.5",
    "@heroicons/react": "^2.2.0",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-icons": "^1.3.2",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@tailwindcss/vite": "^4.1.11",
    "@tanstack/react-query": "^5.80.7",
    "@tanstack/react-query-devtools": "^5.80.7",
    "chalk": "^5.3.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "dompurify": "^3.2.6",
    "firebase": "^10.14.1",
    "framer-motion": "^12.12.1",
    "glob": "^10.3.0",
    "inquirer": "^9.3.7",
    "lucide-react": "^0.511.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-error-boundary": "^4.0.13",
    "react-icons": "^5.5.0",
    "react-router-dom": "^6.11.2",
    "react-virtualized-auto-sizer": "^1.0.26",
    "react-window": "^1.8.11",
    "react-window-infinite-loader": "^1.0.10",
    "tailwind-merge": "^3.3.0",
    "zod": "^3.21.4"
  },
  "devDependencies": {
    "@axe-core/playwright": "^4.10.2",
    "@babel/core": "^7.22.5",
    "@babel/plugin-syntax-import-meta": "^7.10.4",
    "@babel/plugin-transform-modules-commonjs": "^7.27.1",
    "@babel/plugin-transform-react-constant-elements": "^7.27.1",
    "@babel/plugin-transform-react-inline-elements": "^7.27.1",
    "@babel/preset-env": "^7.22.5",
    "@babel/preset-react": "^7.22.5",
    "@babel/preset-typescript": "^7.22.5",
    "@playwright/test": "^1.54.1",
    "@storybook/addon-a11y": "^8.0.0",
    "@storybook/addon-actions": "^8.6.14",
    "@storybook/addon-docs": "^8.0.0",
    "@storybook/react": "^8.0.0",
    "@storybook/react-vite": "^8.0.0",
    "@storybook/react-webpack5": "^8.0.0",
    "@tailwindcss/container-queries": "^0.1.1",
    "@tailwindcss/postcss": "^4.1.11",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^14.0.0",
    "@testing-library/user-event": "^14.4.3",
    "@types/dompurify": "^3.0.5",
    "@types/inquirer": "^9.0.0",
    "@types/jest": "^29.5.14",
    "@types/lodash.debounce": "^4.0.9",
    "@types/node": "^24.0.4",
    "@types/react": "^18.2.6",
    "@types/react-dom": "^18.2.4",
    "@types/react-virtualized-auto-sizer": "^1.0.4",
    "@types/react-window": "^1.8.8",
    "@types/react-window-infinite-loader": "^1.0.9",
    "@types/uuid": "^10.0.0",
    "@typescript-eslint/eslint-plugin": "^5.59.7",
    "@typescript-eslint/parser": "^5.59.7",
    "@vitejs/plugin-react": "^4.5.2",
    "@vitest/browser": "^3.2.4",
    "@vitest/coverage-v8": "^3.2.4",
    "autoprefixer": "^10.4.14",
    "babel-jest": "^29.5.0",
    "dotenv": "^16.5.0",
    "eslint": "^8.41.0",
    "eslint-plugin-react": "^7.32.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.1",
    "eslint-plugin-storybook": "^0.8.0",
    "firebase-admin": "^12.7.0",
    "husky": "^8.0.3",
    "imagemin": "^9.0.1",
    "imagemin-mozjpeg": "^10.0.0",
    "imagemin-pngquant": "^10.0.0",
    "imagemin-svgo": "^11.0.1",
    "jest": "^29.5.0",
    "jest-environment-jsdom": "^29.7.0",
    "jest-extended": "^6.0.0",
    "jest-html-reporters": "^3.1.7",
    "jest-junit": "^16.0.0",
    "lint-staged": "^13.2.2",
    "playwright": "^1.53.1",
    "postcss": "^8.4.24",
    "postcss-cli": "^11.0.1",
    "prettier": "^2.8.8",
    "sharp": "^0.34.2",
    "source-map-explorer": "^2.5.3",
    "tailwindcss": "^4.1.11",
    "ts-jest": "^29.3.4",
    "ts-loader": "^9.5.2",
    "ts-node": "^10.9.2",
    "tsx": "^4.7.1",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.35.1",
    "vite": "^5.4.19",
    "vitest": "^3.2.4"
  },
  "lint-staged": {
    "*.{ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ],
    "docs/**/*.md": [
      "npx tsx scripts/maintain-docs.ts validate"
    ]
  }
}
