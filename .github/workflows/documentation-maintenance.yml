name: Documentation Maintenance Automation

# Automated documentation maintenance workflow
# Runs on schedule and repository events to maintain documentation health

on:
  schedule:
    # Run daily at 2 AM UTC (automated maintenance)
    - cron: '0 2 * * *'
    # Run weekly on Sundays at 6 AM UTC (comprehensive analysis)
    - cron: '0 6 * * 0'
  
  push:
    branches: [ main, develop ]
    paths:
      - 'docs/**'
      - 'scripts/maintain-docs.ts'
      - '.github/workflows/documentation-maintenance.yml'
  
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
  
  workflow_dispatch:
    inputs:
      action:
        description: 'Maintenance action to perform'
        required: true
        default: 'health'
        type: choice
        options:
          - health
          - analyze
          - validate
          - priority
          - archive
      execute_archival:
        description: 'Actually execute archival (not dry-run)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  CACHE_VERSION: 'v1'

jobs:
  documentation-health-check:
    name: Documentation Health Check
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    
    outputs:
      health-score: ${{ steps.health-check.outputs.health-score }}
      broken-references: ${{ steps.health-check.outputs.broken-references }}
      archive-candidates: ${{ steps.health-check.outputs.archive-candidates }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm install -g tsx
      
      - name: Run documentation health check
        id: health-check
        run: |
          echo "🔍 Running documentation health analysis..."
          
          # Create output directory for reports
          mkdir -p .github/reports
          
          # Run health check and capture output
          tsx scripts/maintain-docs.ts health > .github/reports/health-report.txt 2>&1
          
          # Extract metrics for outputs
          HEALTH_SCORE=$(grep "Overall Health:" .github/reports/health-report.txt | grep -o '[0-9]\+%' | head -1 || echo "0%")
          BROKEN_REFS=$(grep "Broken References:" .github/reports/health-report.txt | grep -o '[0-9]\+' | head -1 || echo "0")
          ARCHIVE_CANDIDATES=$(grep "Archive Candidates:" .github/reports/health-report.txt | grep -o '[0-9]\+' | head -1 || echo "0")
          
          echo "health-score=${HEALTH_SCORE}" >> $GITHUB_OUTPUT
          echo "broken-references=${BROKEN_REFS}" >> $GITHUB_OUTPUT
          echo "archive-candidates=${ARCHIVE_CANDIDATES}" >> $GITHUB_OUTPUT
          
          echo "📊 Health Score: ${HEALTH_SCORE}"
          echo "🔗 Broken References: ${BROKEN_REFS}"
          echo "📁 Archive Candidates: ${ARCHIVE_CANDIDATES}"
      
      - name: Upload health report
        uses: actions/upload-artifact@v4
        with:
          name: documentation-health-report
          path: .github/reports/health-report.txt
          retention-days: 30
      
      - name: Comment on PR with health status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const healthReport = fs.readFileSync('.github/reports/health-report.txt', 'utf8');
            
            const healthScore = '${{ steps.health-check.outputs.health-score }}';
            const brokenRefs = '${{ steps.health-check.outputs.broken-references }}';
            const archiveCandidates = '${{ steps.health-check.outputs.archive-candidates }}';
            
            const healthEmoji = healthScore.includes('9') || healthScore.includes('100') ? '🟢' : 
                               healthScore.includes('7') || healthScore.includes('8') ? '🟡' : '🔴';
            
            const comment = `## 📚 Documentation Health Report
            
            ${healthEmoji} **Overall Health:** ${healthScore}
            
            ### 📊 Key Metrics:
            - 🔗 Broken References: ${brokenRefs}
            - 📁 Archive Candidates: ${archiveCandidates}
            
            ### 🔍 Analysis Summary:
            \`\`\`
            ${healthReport.slice(0, 1000)}${healthReport.length > 1000 ? '\n... (truncated)' : ''}
            \`\`\`
            
            > 🤖 Generated by TradeYa Documentation Maintenance System`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  scheduled-maintenance:
    name: Scheduled Documentation Maintenance
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm install -g tsx
      
      - name: Determine maintenance type
        id: maintenance-type
        run: |
          if [[ "${{ github.event.schedule }}" == "0 6 * * 0" ]]; then
            echo "type=comprehensive" >> $GITHUB_OUTPUT
            echo "🔄 Running comprehensive weekly maintenance"
          else
            echo "type=daily" >> $GITHUB_OUTPUT
            echo "📅 Running daily maintenance check"
          fi
      
      - name: Run daily maintenance
        if: steps.maintenance-type.outputs.type == 'daily'
        run: |
          echo "📊 Running daily health check..."
          tsx scripts/maintain-docs.ts health
          
          echo "🔥 Checking Firestore documentation priority..."
          tsx scripts/maintain-docs.ts priority
      
      - name: Run comprehensive maintenance
        if: steps.maintenance-type.outputs.type == 'comprehensive'
        run: |
          echo "🔍 Running comprehensive documentation analysis..."
          
          # Full analysis
          tsx scripts/maintain-docs.ts analyze
          
          # Validate cross-references
          tsx scripts/maintain-docs.ts validate
          
          # Check Firestore priority
          tsx scripts/maintain-docs.ts priority
          
          # Archive outdated documents (dry run)
          tsx scripts/maintain-docs.ts archive
          
          # Generate health report
          tsx scripts/maintain-docs.ts health
      
      - name: Check for documentation changes
        id: changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain docs/) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "📝 Documentation changes detected"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "✅ No documentation changes needed"
          fi
      
      - name: Commit and push changes
        if: steps.changes.outputs.changes == 'true'
        run: |
          git add docs/
          git commit -m "🤖 Automated documentation maintenance
          
          - Updated documentation metadata
          - Synchronized cross-references
          - Maintained Firestore priority documentation
          
          Generated by: Documentation Maintenance Automation
          Workflow: ${{ github.workflow }}
          Run: ${{ github.run_number }}"
          
          git push
      
      - name: Create maintenance summary
        run: |
          echo "## 📚 Documentation Maintenance Summary" > maintenance-summary.md
          echo "" >> maintenance-summary.md
          echo "**Date:** $(date +'%Y-%m-%d %H:%M:%S UTC')" >> maintenance-summary.md
          echo "**Type:** ${{ steps.maintenance-type.outputs.type }}" >> maintenance-summary.md
          echo "**Changes:** ${{ steps.changes.outputs.changes }}" >> maintenance-summary.md
          echo "" >> maintenance-summary.md
          
          # Add health report
          echo "### 📊 Health Report" >> maintenance-summary.md
          echo "\`\`\`" >> maintenance-summary.md
          tsx scripts/maintain-docs.ts health >> maintenance-summary.md 2>&1
          echo "\`\`\`" >> maintenance-summary.md
      
      - name: Upload maintenance summary
        uses: actions/upload-artifact@v4
        with:
          name: maintenance-summary-${{ github.run_number }}
          path: maintenance-summary.md
          retention-days: 90

  manual-maintenance:
    name: Manual Documentation Maintenance
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm install -g tsx
      
      - name: Run maintenance action
        run: |
          ACTION="${{ github.event.inputs.action }}"
          EXECUTE_ARCHIVAL="${{ github.event.inputs.execute_archival }}"
          
          echo "🎯 Running manual maintenance action: ${ACTION}"
          
          case ${ACTION} in
            health)
              tsx scripts/maintain-docs.ts health
              ;;
            analyze)
              tsx scripts/maintain-docs.ts analyze
              ;;
            validate)
              tsx scripts/maintain-docs.ts validate
              ;;
            priority)
              tsx scripts/maintain-docs.ts priority
              ;;
            archive)
              if [[ "${EXECUTE_ARCHIVAL}" == "true" ]]; then
                echo "⚠️ Executing actual archival (not dry-run)"
                tsx scripts/maintain-docs.ts archive --execute
              else
                echo "🔍 Running archival dry-run"
                tsx scripts/maintain-docs.ts archive
              fi
              ;;
            *)
              echo "❌ Unknown action: ${ACTION}"
              exit 1
              ;;
          esac
      
      - name: Check for changes after manual action
        id: manual-changes
        if: github.event.inputs.execute_archival == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "📝 Changes detected after manual action"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "✅ No changes after manual action"
          fi
      
      - name: Commit manual changes
        if: steps.manual-changes.outputs.changes == 'true'
        run: |
          git add -A
          git commit -m "🎯 Manual documentation maintenance: ${{ github.event.inputs.action }}
          
          Action: ${{ github.event.inputs.action }}
          Execute Archival: ${{ github.event.inputs.execute_archival }}
          
          Triggered by: ${{ github.actor }}
          Workflow: ${{ github.workflow }}
          Run: ${{ github.run_number }}"
          
          git push

  firestore-priority-check:
    name: Firestore Documentation Priority Check
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'firestore') || contains(github.event.head_commit.message, 'migration')
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm install -g tsx
      
      - name: Priority Firestore documentation check
        run: |
          echo "🔥 Firestore-related commit detected, running priority check..."
          
          # Run comprehensive Firestore documentation analysis
          tsx scripts/maintain-docs.ts priority
          
          # Validate Firestore documentation accessibility
          tsx scripts/maintain-docs.ts validate
          
          echo "✅ Firestore documentation priority check complete"

  documentation-metrics:
    name: Documentation Metrics Collection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' && github.event.schedule == '0 6 * * 0'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci
          npm install -g tsx
      
      - name: Collect documentation metrics
        run: |
          echo "📊 Collecting weekly documentation metrics..."
          
          # Create metrics directory
          mkdir -p .github/metrics
          
          # Generate comprehensive analysis
          tsx scripts/maintain-docs.ts analyze > .github/metrics/analysis-$(date +%Y-%m-%d).json 2>&1
          
          # Generate health dashboard
          tsx scripts/maintain-docs.ts health > .github/metrics/health-$(date +%Y-%m-%d).txt 2>&1
          
          echo "📈 Weekly metrics collection complete"
      
      - name: Upload metrics
        uses: actions/upload-artifact@v4
        with:
          name: documentation-metrics-${{ github.run_number }}
          path: .github/metrics/
          retention-days: 365
